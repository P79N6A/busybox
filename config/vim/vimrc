"--------------------------------------------------------------------------
"	全局设置（:help）
"--------------------------------------------------------------------------
set nocompatible	" 不要vim模仿vi模式，建议设置，否则会有很多不兼容的问题
set number		" 显示行号
set nowrap		" 不自动换行
"set tabstop=4		" TAB键所表示的空格数
"set shiftwidth=4	" 缩进所表示的空格数（不同于TAB，是利用>>缩进的大小，自动缩进也看这个值）
":set expandtab		" 使用空格替代tab
":%retab!		" 将tab替换为空格，不加“！”表示只替换行首的tab
set autoindent		" 智能自动缩进
filetype on		" 开启文件类型识别功能
filetype plugin on	" 根据文件类型允许插件文件的载入
filetype indent on	" 根据文件类型自动缩进
"set cindent		" 按照C代码风格进行自动缩进
set incsearch		" 在输入要搜索的文字时，实时匹配
set hlsearch		" 对被搜索的表达式显示高亮
syntax enable		" 设置语法高亮可用
syntax on		" 开启语法高亮
colorscheme desert	" 自定义颜色方案（:help hi）
set fdm=syntax		" 设置按照语法进行折叠
set cursorline		" 设置光标所在行的行标记
"set cinoptions=>s,e0,n0,f0,{0,}0,^0,:s,=s,l0,gs,hs,ps,ts,+s,c3,C0,(2s,us,\U0,w0,m0,j0,)20,*30	" 默认cinoption设置
set cinoptions=g0,:0,t0	" 设置C++的public、protected和private关键字不缩进、以及case不缩进
set ignorecase		" 查找时忽略大小写，简写为set ic
"set noignorecase	" 查找时匹配大小写，简写为set noic

"--------------------------------------------------------------------------
"	设置热键
"--------------------------------------------------------------------------
"	设置F3在去除高亮热键
map	<silent> <f3>	:noh<cr>
imap	<silent> <f3>	<esc><f3>a
"	设置F4启动bash子进程热键
map	<f4>	:!bash<cr>
imap	<f4>	<esc><f4>
"	设置F5进入二进制xxd编辑模式
map	<f5>	:%!xxd<cr>
imap	<f5>	<esc><f5>a
"	设置F6退出二进制xxd编辑模式
map	<f6>	:%!xxd -r<cr>
imap	<f6>	<esc><f6>a
"	设置调整窗口size的热键
nmap	<A-LEFT>	<C-W><
nmap	<A-RIGHT>	<C-W>>
nmap	<A-UP>		<C-W>+
nmap	<A-DOWN>	<C-W>-
"	设置一行太长，并且wrap被设置时，按视觉效果上下行移动，而不是按实际行进行移动
"nmap	J	gj
"nmap	K	gk
"	设置将当前word设置高亮
"	vim中的左右字符边界为：\<和\>，而不是标准正则中的\b
nmap	<silent> mm	yiw:match WildMenu	/\<<C-r>0\>/<cr>
nmap	<silent> m0	yiw:match Search	/\<<C-r>0\>/<cr>
nmap	<silent> m9	yiw:match ErrorMsg	/\<<C-r>0\>/<cr>
nmap	<silent> m1	yiw:match DiffDelete	/\<<C-r>0\>/<cr>
nmap	<silent> m2	yiw:match IncSearch	/\<<C-r>0\>/<cr>
nmap	<silent> m-	yiw:match Visual	/\<<C-r>0\>/<cr>
nmap	<silent> m=	yiw:match StatusLine	/\<<C-r>0\>/<cr>
nmap	<silent> mn	yiw:match none<cr>
"	vi中的查找有两种方式：
"	一：/和?需要用户自己输入，并且按照正则进行匹配，一个向下查找，一个向上查找
"	二：*和#默认匹配当前单词，进行严格匹配，一个向上查找，一个向下查找。非严格匹配使用g*和g#，非严格匹配允许部分匹配
"	快速选中当前词，使用iw和相关命令进行组合，例如：viw, yiw，iw表示inner word，详见：:help iw
"	与iw相关的还有i[、i(等等，表示匹配在括号之内的所有数据。在括号范围内还可以使用a(，它和i(的不同是：i(部包含括号，而a(包含括号

nmap	<silent> <C-m>	<esc>:cw<cr>

"--------------------------------------------------------------------------
"	设置自定义颜色（不使用自动命令无法生效）
"--------------------------------------------------------------------------
autocmd BufRead,BufNewFile *.[ch]* syntax keyword Typedef byte
autocmd BufRead,BufNewFile *.[ch]* syntax keyword Typedef uchar
autocmd BufRead,BufNewFile *.[ch]* syntax keyword Typedef ushort
autocmd BufRead,BufNewFile *.[ch]* syntax keyword Typedef uint
autocmd BufRead,BufNewFile *.[ch]* syntax keyword Typedef ulong

"--------------------------------------------------------------------------
"	设置ctags
"--------------------------------------------------------------------------
nmap <C-\> :tselect<cr>
"让CTRL-]只有一个选择时自动跳转，多个选择时，出现选择列表
" map <C-]> :tselect <C-R>=expand("<cword>")<CR><CR>
" map <C-]> g<C-]>

"	设置TagList
"let Tlist_Ctags_Cmd = '/usr/bin/ctags'
"let Tlist_Auto_Open=1    "在启动 vim 后，自动打开 taglist 窗口。
"let Tlist_Use_Right_Window = 1 "在右侧窗口中显示 taglist 窗口
let Tlist_Show_One_File=1 " 仅显示当前文件的tags目录
let Tlist_Exit_OnlyWindow=1 " 当仅剩下taglist窗口的时候启动关闭

"--------------------------------------------------------------------------
"	设置Cscope
"--------------------------------------------------------------------------
set cscopequickfix=s-,c-,d-,i-,t-,e- " 使用 quickfix 窗口来显示cscope结果

"--------------------------------------------------------------------------
"	设置c-support
"--------------------------------------------------------------------------
"	设置c-support的命令符
let g:C_MapLeader='@'
"	设置c-support根据文件扩展名使用不同的模板
let g:C_Styles = { '*.c,*.h' : 'default', '*.cc,*.cpp,*.hpp' : 'CPP' }

"--------------------------------------------------------------------------
"	设置WinManager
"--------------------------------------------------------------------------
let g:winManagerWindowLayout='FileExplorer|TagList' " 设置窗口布局
map	<silent> <f2>	:WMToggle<cr>
imap	<silent> <f2>	<esc><f2>a

"--------------------------------------------------------------------------
"	设置MiniBufExplorer（利用ctrl进行窗口切换）
"--------------------------------------------------------------------------
let g:miniBufExplMapCTabSwitchBufs = 1 " 供过tab切换窗口
let g:miniBufExplMapWindowNavVim = 1 " 通过h,j,k,l切换窗口
let g:miniBufExplMapWindowNavArrows = 1 " 通过方向键切换窗口

"--------------------------------------------------------------------------
"	设置OmniCppComplete
"--------------------------------------------------------------------------
set tags+=~/.vim/tags/ctags
set tags+=~/.vim/tags/cpptags
set tags+=~/.vim/tags/gnutags
"set tags+=~/.vim/tags/phptags
"set tags+=~/.vim/tags/kerneltags
"	设置PythonComplete（没有看到效果）
"autocmd FileType python set omnifunc=pythoncomplete#Complete

let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
"let OmniCpp_DefaultNamespaces = ["std", \"_GLIBCXX_STD"]
" 自动关闭补全窗口
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest

"--------------------------------------------------------------------------
"	设置鼠标及滚轮
"--------------------------------------------------------------------------
":set	mouse=a
:map	<ScrollWheelUp>		<C-Y>
:map	<S-ScrollWheelUp>	<C-B>
:map	<C-ScrollWheelUp>	<C-U>
:map	<ScrollWheelDown>	<C-E>
:map	<S-ScrollWheelDown>	<C-F>
:map	<C-ScrollWheelDown>	<C-D>

" for git merge
let mapleader=','
map <silent> <leader>1 :diffget 1<CR> :diffupdate<CR>
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"--------------------------------------------------------------------------
"	添加临时配置
"--------------------------------------------------------------------------
if findfile('./vimrc') != ''
	source ./vimrc
endif
